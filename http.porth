include "std.porth"

inline proc HTTP_OK
  int
in
  let connfd in
    "HTTP/1.1 200 OK\r\n" connfd fputs
    "Server: http-porth\r\n" connfd fputs
    "Content-Type: text/html\r\n" connfd fputs
    "Connection: Closed\r\n" connfd fputs
    "\r\n" connfd fputs
  end
end

inline proc HTTP_INVALID_REQUEST
  int
in
  let connfd in
    "HTTP/1.1 400 Invalid Request\r\n" connfd fputs
    "Server: http-porth\r\n" connfd fputs
    "Content-Type: text/html\r\n" connfd fputs
    "Connection: Closed\r\n" connfd fputs
    "\r\n" connfd fputs
    "<h1>400 Invalid Request</h1>" connfd fputs
  end
end
inline proc HTTP_NOT_FOUND
  int
in
  let connfd in
    "HTTP/1.1 404 Not Found\r\n" connfd fputs
    "Server: http-porth\r\n" connfd fputs
    "Content-Type: text/html\r\n" connfd fputs
    "Connection: Closed\r\n" connfd fputs
    "\r\n" connfd fputs
    "Could not find the page you're looking for..." connfd fputs
  end
end
// Wrapper for open syscall
inline proc open int int ptr -- int in
  SYS_open syscall3
end
inline proc HTTP_INTERNAL_ERROR int in

  let connfd in
    "HTTP/1.1 500 Internal Server Error\r\n" connfd fputs
    "Server: http-porth\r\n" connfd fputs
    "Content-Type: text/html\r\n" connfd fputs
    "Connection: Closed\r\n" connfd fputs
    "\r\n" connfd fputs
    "<h1>500 Internal Server Error</h1>" connfd fputs
  end
end
proc http::static 
  bool // Send Headers
  int ptr // Route
  int // connfd
  ptr // folder
in
  peek route _ _ in route @8 dup putch " : char\n" puts end 47 = if

  let 
  send-headers
  route-size route 
  confd folder-path in
    // Start: Get File name from route
      "Serving " puts
      route-size route puts
      "\n" puts
      route-size 1 <= if
        "index.html"c
      else 
        
        route-size 1 -
        route 1 ptr+
        route-size tmp-alloc 
        let new-size router-file-path file-path in
          new-size 
          router-file-path
          file-path
          memcpy
          0 file-path new-size ptr+ !64
        end
      end
    // End: Get File name from Route

    // Start: Open Folder
      0
      O_RDONLY // flags
      folder-path // Folder path
      open
    // End: Open folder
    // Returns: fd
    confd
    send-headers
  end
  let 
  file-path 
  folderfd 
  connfd
  send-headers
  in

    folderfd 0 < if
      send-headers if
        connfd HTTP_INTERNAL_ERROR
      else
        "<h1>500 Internal Server Error</h1>" connfd fputs
      end
    else
      memory n sizeof(u64) end
      memory buf 4096 end
      0 O_RDONLY file-path folderfd openat
      let filefd in
        filefd 0 < if
          send-headers if
            connfd HTTP_NOT_FOUND
          else
            "Could not find /" connfd fputs
            file-path cstr-to-str connfd fputs
            "<br>\r\n" connfd fputs
          end
        else
          send-headers if
            connfd HTTP_OK
          end
          while 4096 buf filefd read n !64 n @64 0 > do 
            n @64 buf connfd fputs
          end
          filefd close drop
        end
        folderfd close drop
      end
    end
    file-path tmp-clean drop
  end
  else
    "ERROR: The route must start with a slash!\n" eputs
    drop drop drop drop drop
  end
end
inline proc inet_addr int int int int -- int
in
  let p1 p2 p3 p4 in
    p4 24 shl
    p3 16 shl or
    p2 8 shl or
    p1 or
  end
end
const CLIENT_BUF_CAP 1024 end
const _CONNECTIONS_QUEUE_SIZE 5 end

proc http::create_socket -- 
int // File Descriptor
in
  0 SOCK_STREAM AF_INET socket
end

// Returns a brand new ready-to-listen socket
proc http::create_server 
int int int int // IP
int // Port 
--
int // File Descriptor
in
  memory servaddr sizeof(sockaddr) end
  sizeof(sockaddr) 0 servaddr memset drop
  let ip1 ip2 ip3 ip4 port in 
    http::create_socket
    peek fd in 
      fd 0 < if
        "ERROR: Couldn't create a socket\n" eputs
        1 exit
      end

      AF_INET      servaddr sockaddr_in.sin_family ptr+ !16 
      ip1 ip2 ip3 ip4 inet_addr servaddr sockaddr_in.sin_addr ptr+ !32
      port htons   servaddr sockaddr_in.sin_port ptr+ !16
      sizeof(sockaddr) servaddr fd bind 0 < if
        "ERROR: could not bind the socket\n" eputs
        1 exit
      end
    end
  end
end
proc handle_http_request
  int ptr // Route
  int // connfd
in 
  let n s fd in
    n s puts "\n" puts
    n s "/" streq if
      fd HTTP_OK
      "<h1>Hello World!</h1>" fd fputs
    else
      fd HTTP_NOT_FOUND
    end
  end
end
proc _handle_connection int addr in
  "Connection received\n" puts
  memory client_buf CLIENT_BUF_CAP end
  let connfd handle_request in 

    CLIENT_BUF_CAP client_buf connfd read
    dup 0 < if
      "ERROR: could not read the client request\n" puts
      drop
    else
      // This will fail if the size is 0, so we check if its greater
      dup 0 > if
        client_buf '\n' str-chop-by-delim-2
        let _ _ n s in n s end
        ' ' str-chop-by-delim-2
        let n s _ _ in n s end
        ' ' str-chop-by-delim-2
        let _ _ n s in n s end
        over 0 = if
          connfd HTTP_INVALID_REQUEST
          drop drop
        else
          connfd
          handle_request call-like handle_http_request
        end
    end
    connfd close drop
  end
end

proc http::listen addr int in
  let handle_request fd in

    _CONNECTIONS_QUEUE_SIZE fd listen 0 < if
      "ERROR: Failed to listen for connections\n" eputs
      1 exit
    end
    while true do
      memory cliaddr sizeof(sockaddr) end
      memory clilen sizeof(u32) end
      clilen cliaddr fd accept
      dup 0 > if
        dup handle_request _handle_connection
        close drop
      else
        drop
      end
    end
  end
end
